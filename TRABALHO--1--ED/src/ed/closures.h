#ifndef CLOSURE_H
#define CLOSURE_H

#include "lista.h"
#include "../arqs/main.h"
#include "../objetos/formas.h"
#include "../objetos/texto.h"

// COMENT√ÅRIO DO JEAN: eu percebi quando eu tava muito na frente no meu trabalho
// que era melhor fazer as closures (veja bem): [ü•¥ apenas no .c que vai usar ela
// e nem botar no .h do lugar ü•¥] ao inv√©s de ter um closures.c separadinho pra elas
// o motivo √© que NAO PODE STRUCT NO .h, entao fica essa PATIFARIA de void* e fun√ßao
// pra criar clausura sendo que nao precisa e acaba s√≥ complicando o c√≥digo.
// quando eu percebi eu ja tava muito longe no trabalho e tinha feito tudo isso 
// entao pra mudar ia ser um SACO.
// ou seja: check.h e .c, map.h e .c, e closures.h e .c n√£o precisam existir, mas
// as fun√ß√µes que eles usam v√£o estar espalhadas em outros .c
// exemplo: a fun√ßao que usa no fold pra calcular pontos, a que move as coisas pro come√ßo do svg
// e a que desloca pra direita v√£o todas estar SOMENTE no foto.c


// Este m√≥dulo prov√™ fun√ß√µes que operam como Closure no programa
//(mesmo C n√£o sendo uma linguagem que d√° suporte a isto).

/* Closure √© um conceito em programa√ß√£o que se refere √† habilidade de uma fun√ß√£o
de referenciar vari√°veis de uma fun√ß√£o externa que j√° foi encerrada.
Em outras palavras, um closure √© uma fun√ß√£o que pode "lembrar" do ambiente
em que ela foi criada, mesmo quando √© executada em um contexto diferente.
*/

// Aquela ideia de acessar a struct "sem roupa" no escuro,
// mas confiar que est√° acessando mesmo n√£o vendo diretamente.

// COMENT√ÅRIO DO JEAN: isso √© void pointer, n√£o closure
// closure √© aquilo da fun√ß√£o levar uma mochilinha com ela pra poder lembrar de algo
// que ela n√£o tem acesso direto, porque ela esquece de tudo quando acaba (a coitada tem alzheimer)
// nesse caso das listas vai chamar um monte de vezes a mesma fun√ß√£o
// e ela vai lembrar de algo. EXEMPLO:
// fun√ßao(elemento1, closure)
// * consegue ler o que t√° na closure ou escrever algo nela *
// * fun√ßao ESQUECE DE TUDO QUE ACONTECEU *
// * closure ainda ta mudada *
// fun√ßao(elemento2, closure)
// * consegue ler o que t√° na closure ou escrever algo nela *

// Closure √© sempre um ponteiro para void, ou seja, um ponteiro gen√©rico.

// Closures para lidar com o SVG:
typedef void *ClosureSvg;
ClosureSvg criaClosureSvg(FILE *svg);
void escreveSvg(Item item, Clausura c);
void freeClosureSvg(Clausura c);

// Closures para lidar com o Id do Item:
typedef void *ClosureId;
ClosureId criaClosureId(int id);
void findId(Item item, Clausura c);
Item getClosureItem(Clausura c);
void freeClosureId(Clausura c);

// Closures pra lidar com TXT:
typedef void *ClosureTxt;
ClosureTxt criaClosureTxt(FILE *txt);
void escreveTxt(Item item, Clausura c);
void freeClosureTxt(Clausura c);

// Closures pra lidar com a pontua√ß√£o das fotos:

typedef void *ClosurePontuacao;
ClosurePontuacao criaClosurePontuacao(double pontuacao);
double getClosurePontuacao(Clausura c);
void calculaPontuacao(Item item, Clausura c);
void freeClosurePontuacao(Clausura c);

// Closures para manipular o maior X encontrado entre as formas da lista:

typedef void *ClosureMaiorX;
ClosureMaiorX criaClosureMaiorX();
double getClosureMaiorX(Clausura c);
void findMaiorX(Item item, Clausura c);
void freeClosureMaiorX(Clausura c);

// Closures para lidar com o deslocamento do item para a direita (√∫til para encaixar no svg):

typedef void *ClosureDeslocaDireita;
ClosureDeslocaDireita criaClosureDeslocaDireita(double deslocamento);
void deslocaDireita(Item item, Clausura c);
void freeClosureDeslocaDireita(Clausura c);

// Closures para lidar com os par√¢metros de foto:

typedef void *ClosureFoto;
ClosureFoto criaClosureFoto(double xbalao, double ybalao, double r, double p, double h);
void moveElementosFoto(Item item, Clausura c);
void freeClosureFoto(Clausura c);

#endif